<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第一个Maven项目</title>
    <url>/2020/09/28/My-new-post/</url>
    <content><![CDATA[<p>第一步. 首先建立Hello项目同时建立Maven约定的目录结构<br>Hello<br>–src<br>—–main<br>———-java<br>———-resources<br>—–test<br>———java<br>———resources<br>–pom.xml<br>第二步：在项目Hello根目录建立pom.xml<br><dependencies><br>    <dependency><br>        <groupId>junit</groupId><br>        <artifactId>junit</artifactId><br>        <version>4.9</version><br>        <scope>test</scope><br>    </dependency>       </p>
</dependencies>
第三步：在src/main/java/cn/itcast/maven目录下新建文件Hello.java
package cn.itcast.maven;
public class Hello {
public String sayHello(String name){
    return "Hello "+name+"!";
}
}
第四步：在/src/test/java/cn/itcast/maven目录下新建测试文件HelloTest.java
package cn.itcast.maven;
import org.junit.Test;
import static junit.framework.Assert.*;
public class HelloTest {
@Test
public void testHello(){

<pre><code>Hello hello = new Hello();
String results = hello.sayHello(&quot;litingwei&quot;);
assertEquals(&quot;Hello litingwei!&quot;,results);       </code></pre>
<p>}<br>}<br>第五步：<br>a)打开cmd命令行，进入Hello项目根目录执行 mvn compile命令，查看根目录变化<br>b)cmd 中继续录入mvn clean命令，然后再次查看根目录变化<br>c)cmd 中录入 mvn clean compile命令, 查看根目录变化<br>d)cmd 中录入 mvn clean test命令，查看根目录变化<br>e)cmd 中录入 mvn clean package命令,查看根目录变化</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<p>##hello hexo</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>使用nexus搭建Maven私服</title>
    <url>/2020/09/28/%E4%BD%BF%E7%94%A8nexus%E6%90%AD%E5%BB%BAMaven%E7%A7%81%E6%9C%8D/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>搭建多模块企业级项目</title>
    <url>/2020/09/28/%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>首先，前面几次学习已经学会了安装maven，如何创建maven项目等，最近的学习，终于有点进展了，搭建一下企业级多模块项目。<br>好了，废话不多说，具体如下：<br>首先新建一个maven项目，pom.xml的文件如下：<br>搭建多模块项目，必须要有一个packaging为pom的根目录。创建好这个maven项目后，我们对着项目右键–&gt;new<br>输入你的项目名称<br>这里就不重复说创建项目了，创建好的目录结构在eclipse中如下：<br>说明一下这些项目具体都是干嘛的：<br>easyframework-model：数据模型，与数据库表字段对应的实体类<br>easyframework-core：核心业务项目。主要是Service处理业务逻辑<br>easyframework-persist：数据持久层，操作低层数据库。<br>easyframework-utils：工具类，所有工具类都提取出来写在这个项目中。<br>easyframework-web :这个就是整个项目的web层了，页面的显示以及控制层<br>备注：创建这些项目的时候，只有easyframework-web是web项目即maven的：maven-archetype-webapp，其他的都是java项目：maven-archetype-quicktart<br>打开easyframework-root的pom.xml文件，你会看到模块化是这样的：<br>接下来是配置各个模块的依赖关系，我个人认为的项目是这样依赖的，不知道对不对，呵呵….<br>举个例子easyframework-web这个项目依赖easyframework-core(业务核心)和easyframework-model(实体类)，easyframework-utils(公共的工具类)这个三个模块。<br>那么在怎么在easyframework-web的pom.xml中体现呢，具体如下：<br>打开项目的maven依赖你会发现，已经依赖了这三个项目<br>但是你应该会感觉到奇怪，为什么会有那么jar包，明明只引用了这三个项目，哪来的那么多jar包。<br>你会发现，我再pom.xml文件中，有个parent节点，继承了根节点的pom，这就是maven的项目继承依赖，会从父POM中继承一些值。这对构建一个大型的系统来说很有必要<br>这样的话你就不需要一遍又一遍的重复添加同样的依赖元素，当然，如果你在子项目中也有同样的依赖，则会覆盖父POM中的值。<br>父POM的的依赖如下：<br>复制代码<br>复制代码<br>1 &lt;project xmlns=”<a href="http://maven.apache.org/POM/4.0.0&quot;">http://maven.apache.org/POM/4.0.0&quot;</a> xmlns:xsi=”<a href="http://www.w3.org/2001/XMLSchema-instance&quot;">http://www.w3.org/2001/XMLSchema-instance&quot;</a><br>2     xsi:schemaLocation=”<a href="http://maven.apache.org/POM/4.0.0">http://maven.apache.org/POM/4.0.0</a> <a href="http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;">http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;</a><br>3     4.0.0<br>4     com.easyframework<br>5     easyframework-root<br>6     pom<br>7     1.0<br>8     easyframework-root<br>9     <a href="http://maven.apache.org/">http://maven.apache.org</a><br>10<br>11         easyframework-web<br>12         easyframework-persist<br>13         easyframework-core<br>14         easyframework-utils<br>15         easyframework-model<br>16<br>17<br>18<br>19         &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;<br>20<br>21         &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;<br>22         &lt;mysql.version&gt;5.1.25&lt;/mysql.version&gt;<br>23         &lt;hibernate.version&gt;4.2.2.Final&lt;/hibernate.version&gt;<br>24         &lt;spring.version&gt;3.2.3.RELEASE&lt;/spring.version&gt;<br>25         &lt;aspectj.version&gt;1.7.2&lt;/aspectj.version&gt;<br>26<br>27<br>28<br>29             springsource-repo<br>30             SpringSource Repository<br>31             <a href="http://repo.springsource.org/release">http://repo.springsource.org/release</a><br>32<br>33<br>34<br>35<br>36<br>37<br>38             log4j<br>39             log4j<br>40             1.2.17<br>41<br>42<br>43<br>44             junit<br>45             junit<br>46             4.11<br>47             test<br>48<br>49<br>50<br>51             mysql<br>52             mysql-connector-java<br>53             ${mysql.version}<br>54<br>55<br>56<br>57             org.hibernate<br>58             hibernate-core<br>59             ${hibernate.version}<br>60<br>61<br>62<br>63             org.aspectj<br>64             aspectjweaver<br>65             ${aspectj.version}<br>66<br>67<br>68<br>69             org.springframework<br>70             spring-core<br>71             ${spring.version}<br>72<br>73<br>74             org.springframework<br>75             spring-context<br>76             ${spring.version}<br>77<br>78<br>79             org.springframework<br>80             spring-jdbc<br>81             ${spring.version}<br>82<br>83<br>84             org.springframework<br>85             spring-beans<br>86             ${spring.version}<br>87<br>88<br>89             org.springframework<br>90             spring-web<br>91             ${spring.version}<br>92<br>93<br>94             org.springframework<br>95             spring-expression<br>96             ${spring.version}<br>97<br>98<br>99             org.springframework<br>100             spring-orm<br>101             ${spring.version}<br>102<br>103<br>104<br>105         easyframework-root<br>106<br>107<br>108                 maven-compiler-plugin<br>109<br>110                     1.6<br>111                     1.6<br>112<br>113<br>114<br>115<br>116<br>复制代码<br>复制代码<br>当然这个父POM只是一个例子，你可以根据自己的配置添加相关的依赖，这里给一个我认为是最好用的仓库：<br><a href="http://mvnrepository.com/">http://mvnrepository.com/</a> 相信地球人都知道这个！哈哈…..<br>到此就搭建好了企业级多模块的项目环境了。</p>
]]></content>
  </entry>
</search>
